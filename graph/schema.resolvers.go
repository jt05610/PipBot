package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"pipbot/graph/model"
)

// CreateMatrix is the resolver for the createMatrix field.
func (r *mutationResolver) CreateMatrix(ctx context.Context, matrix model.NewMatrix) (*model.Matrix, error) {
	return r.Client.CreateMatrix(ctx, matrix)
}

// AddGrid is the resolver for the addGrid field.
func (r *mutationResolver) AddGrid(ctx context.Context, matrixID string, grid model.NewGrid) (*model.Grid, error) {
	return r.Client.AddGrid(ctx, matrixID, grid)
}

// CreateRecipe is the resolver for the createRecipe field.
func (r *mutationResolver) CreateRecipe(ctx context.Context, recipe model.NewRecipe) (*model.Recipe, error) {
	return r.Client.CreateRecipe(ctx, recipe)
}

// AddTransfer is the resolver for the addTransfer field.
func (r *mutationResolver) AddTransfer(ctx context.Context, recipeID string, transfer model.NewTransfer) (*model.Transfer, error) {
	return r.Client.AddTransfer(ctx, recipeID, transfer)
}

// Matrices is the resolver for the matrices field.
func (r *queryResolver) Matrices(ctx context.Context) ([]*model.Matrix, error) {
	return r.Client.Matrices(ctx)
}

// Grids is the resolver for the grids field.
func (r *queryResolver) Grids(ctx context.Context, matrixID string) ([]*model.Grid, error) {
	return r.Client.Grids(ctx, matrixID)
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.Recipe, error) {
	return r.Client.Recipes(ctx)
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context, id string) (*model.Recipe, error) {
	return r.Client.Recipe(ctx, id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
